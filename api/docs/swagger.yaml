definitions:
  helpers.StdResp:
    properties:
      code:
        type: string
      errors:
        items:
          $ref: '#/definitions/helpers.StdRespError'
        type: array
      message:
        type: string
    type: object
  helpers.StdRespError:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  models.Account:
    properties:
      id:
        type: string
      is_online:
        type: boolean
      name:
        type: string
      profile_photo:
        type: string
      type:
        type: string
      username:
        type: string
    type: object
  models.AppleLoginModel:
    properties:
      access_token:
        type: string
    type: object
  models.AppleLoginResponse:
    properties:
      access_token:
        type: string
      id:
        type: string
      mail:
        type: string
      refresh_token:
        type: string
      registered:
        type: boolean
    type: object
  models.BlockClientRequestModel:
    properties:
      client_id:
        type: string
    type: object
  models.BlockUserModel:
    properties:
      blocked_id:
        type: string
    type: object
  models.CheckFieldModel:
    properties:
      field:
        type: string
      value:
        type: string
    type: object
  models.CheckFieldResponseModel:
    properties:
      exists:
        type: boolean
    type: object
  models.CheckMailModel:
    properties:
      mail:
        type: string
    type: object
  models.ClientModel:
    properties:
      bio:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      mail:
        type: string
      profile_photo:
        type: string
      username:
        type: string
    type: object
  models.ClientReviewsItemModel:
    properties:
      club:
        type: string
      club_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      event:
        type: string
      id:
        type: string
      object_id:
        type: string
      object_type:
        type: string
      photo:
        type: string
      post_id:
        type: string
      rating:
        type: number
      updated_at:
        type: string
    type: object
  models.ClientReviewsModel:
    properties:
      count:
        type: integer
      rating:
        type: number
      reviews:
        items:
          $ref: '#/definitions/models.ClientReviewsItemModel'
        type: array
    type: object
  models.Club:
    properties:
      id:
        type: string
      location:
        $ref: '#/definitions/models.Location'
        type: object
      mail:
        type: string
      name:
        type: string
      user_name:
        type: string
    type: object
  models.ClubCategory:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        type: string
    type: object
  models.ClubInfoModel:
    properties:
      club_id:
        type: string
      dress_code:
        type: string
      operation_hours:
        items:
          $ref: '#/definitions/models.OperationHours'
        type: array
    type: object
  models.ClubModel:
    properties:
      about:
        type: string
      address:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/models.Location'
        type: object
      mail:
        type: string
      name:
        type: string
      profile_photo:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.ClubRatingModel:
    properties:
      count:
        type: integer
      rating:
        type: number
    type: object
  models.ClubReviewsItemModel:
    properties:
      content:
        type: string
      created_at:
        type: string
      event:
        type: string
      id:
        type: string
      object_id:
        type: string
      object_type:
        type: string
      photo:
        type: string
      rating:
        type: number
      updated_at:
        type: string
      user:
        type: string
      user_id:
        type: string
      user_type:
        type: string
    type: object
  models.ClubReviewsModel:
    properties:
      count:
        type: integer
      rating:
        type: number
      reviews:
        items:
          $ref: '#/definitions/models.ClubReviewsItemModel'
        type: array
    type: object
  models.CommentCreateReq:
    properties:
      content:
        type: string
      object_id:
        type: string
      object_type:
        type: string
    required:
    - content
    - object_id
    - object_type
    type: object
  models.CommentCreateResp:
    type: object
  models.ConfirmMailModel:
    properties:
      code:
        type: string
      mail:
        type: string
      user_id:
        type: string
    type: object
  models.ConfirmMailResponse:
    properties:
      valid:
        type: boolean
    type: object
  models.CreateClubInfoModel:
    properties:
      club_id:
        type: string
      dress_code:
        type: string
      operation_hours:
        items:
          $ref: '#/definitions/models.CreateOperationHours'
        type: array
    type: object
  models.CreateClubRequestModel:
    properties:
      about:
        type: string
      address:
        type: string
      categories:
        items:
          $ref: '#/definitions/models.Type'
        type: array
      location:
        $ref: '#/definitions/models.Location'
        type: object
      mail:
        type: string
      name:
        type: string
      phone:
        type: string
      profile_photo:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.CreateClubResponseModel:
    properties:
      about:
        type: string
      access_token:
        type: string
      address:
        type: string
      categories:
        items:
          $ref: '#/definitions/models.ClubCategory'
        type: array
      id:
        type: string
      location:
        $ref: '#/definitions/models.Location'
        type: object
      mail:
        type: string
      name:
        type: string
      owner_id:
        type: string
      phone:
        type: string
      profile_photo:
        type: string
      refresh_token:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.CreateEventRequestModel:
    properties:
      club_id:
        type: string
      description:
        type: string
      end_date:
        type: string
      end_time:
        type: string
      event_types:
        items:
          $ref: '#/definitions/models.Type'
        type: array
      flyer_url:
        type: string
      music_types:
        items:
          $ref: '#/definitions/models.Type'
        type: array
      name:
        type: string
      promo_video_url:
        type: string
      start_date:
        type: string
      start_time:
        type: string
      ticket_url:
        type: string
      user_video_url:
        type: string
      video_url:
        type: string
    type: object
  models.CreateOperationHours:
    properties:
      end_time:
        type: string
      is_closed:
        type: boolean
      parties:
        items:
          $ref: '#/definitions/models.Type'
        type: array
      start_time:
        type: string
      weekday:
        type: integer
    type: object
  models.CreatePostResponseMediaModel:
    properties:
      content_type:
        type: string
      media_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      order_no:
        type: integer
    type: object
  models.CreatePostResponseModel:
    properties:
      medias:
        items:
          $ref: '#/definitions/models.CreatePostResponseMediaModel'
        type: array
      mentions:
        items:
          $ref: '#/definitions/models.Mention'
        type: array
      post:
        $ref: '#/definitions/models.CreatePostResponsePostModel'
        type: object
    type: object
  models.CreatePostResponsePostModel:
    properties:
      caption:
        type: string
      club_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      event_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
    type: object
  models.CreatePreferencesModel:
    properties:
      client_id:
        type: string
      type_ids:
        items:
          type: integer
        type: array
    type: object
  models.CreateShareModel:
    properties:
      object_id:
        type: string
      object_type:
        type: string
    type: object
  models.Data:
    properties:
      height:
        type: string
      is_silhouette:
        type: boolean
      url:
        type: string
      width:
        type: integer
    type: object
  models.DeleteEventModel:
    properties:
      event_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99669
        type: string
    type: object
  models.DeleteFollowerModel:
    properties:
      foller_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
    type: object
  models.Event:
    properties:
      flyer:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/models.Location'
        type: object
      name:
        type: string
    type: object
  models.EventCountModel:
    properties:
      event_counts:
        items:
          $ref: '#/definitions/models.eventCount'
        type: array
    type: object
  models.EventModel:
    properties:
      address:
        type: string
      club_id:
        type: string
      club_name:
        type: string
      club_username:
        type: string
      created_at:
        type: string
      creator_avatar_url:
        type: string
      creator_id:
        type: string
      creator_name:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      end_time:
        type: string
      event_types:
        items:
          $ref: '#/definitions/models.EventType'
        type: array
      featured:
        type: boolean
      flyer_url:
        type: string
      id:
        type: string
      is_holding:
        type: string
      is_live:
        type: boolean
      like_count:
        type: integer
      liked:
        type: boolean
      location:
        properties:
          lat:
            type: number
          long:
            type: number
        type: object
      music_types:
        items:
          $ref: '#/definitions/models.EventType'
        type: array
      name:
        type: string
      posts:
        items:
          $ref: '#/definitions/models.PostMediaModel'
        type: array
      promo_video_thumbnail_url:
        type: string
      promo_video_url:
        type: string
      rating:
        $ref: '#/definitions/models.Rating'
        type: object
      share_count:
        type: integer
      share_link:
        type: string
      start_date:
        type: string
      start_time:
        type: string
      status:
        type: string
      ticket_url:
        type: string
      updated_at:
        type: string
      user_type:
        type: string
      user_video_thumbnail_url:
        type: string
      user_video_url:
        type: string
      video_thumbnail_url:
        type: string
      video_url:
        type: string
      videos:
        items:
          $ref: '#/definitions/models.PostMediaModel'
        type: array
    type: object
  models.EventType:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        type: string
    type: object
  models.FbLinkModel:
    properties:
      access_token:
        type: string
      facebook_id:
        type: string
      user_id:
        type: string
    type: object
  models.FbLoginRequest:
    properties:
      access_token:
        type: string
      facebook_id:
        type: string
      fcm_token:
        type: string
    type: object
  models.FbLoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      picture:
        $ref: '#/definitions/models.Picture'
        type: object
      refresh_token:
        type: string
      registered:
        type: boolean
      website:
        type: string
    type: object
  models.FilterResp:
    properties:
      count:
        type: string
      events:
        items:
          $ref: '#/definitions/models.EventModel'
        type: array
    type: object
  models.FollowRequestModel:
    properties:
      folling_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
    type: object
  models.GeozoneModel:
    properties:
      count:
        type: integer
      geozones:
        items:
          $ref: '#/definitions/models.geozone'
        type: array
    type: object
  models.GetAllClubEventsResponseModel:
    properties:
      club_id:
        type: string
      end_date:
        type: string
      end_time:
        type: string
      flyer_url:
        type: string
      id:
        type: string
      name:
        type: string
      promo_video_url:
        type: string
      share_link:
        type: string
      start_date:
        type: string
      start_time:
        type: string
      video_url:
        type: string
    type: object
  models.GetAllEventsItem:
    properties:
      going:
        type: boolean
      like_count:
        type: integer
      liked:
        type: boolean
      promo_video_thumbnail_url:
        type: string
      promo_video_url:
        type: string
      rating:
        $ref: '#/definitions/models.Rating'
        type: object
      user_video_thumbnail_url:
        type: string
      user_video_url:
        type: string
      video_thumbnail_url:
        type: string
      video_url:
        type: string
    type: object
  models.GetAllEventsResponse:
    properties:
      count:
        type: integer
      events:
        items:
          $ref: '#/definitions/models.GetAllEventsItem'
        type: array
    type: object
  models.GetAllUsersModel:
    properties:
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.GetByNowEventsResponseModel:
    properties:
      end_date:
        type: string
      end_time:
        type: string
      flyer_url:
        type: string
      id:
        type: string
      name:
        type: string
      start_date:
        type: string
      start_time:
        type: string
    type: object
  models.GetClubAndEventResponse:
    properties:
      club:
        $ref: '#/definitions/models.Club'
        type: object
      event:
        $ref: '#/definitions/models.Event'
        type: object
    type: object
  models.GetClubResponseModel:
    properties:
      about:
        type: string
      accounts:
        items:
          $ref: '#/definitions/models.Account'
        type: array
      address:
        type: string
      blocked:
        type: boolean
      categories:
        items:
          $ref: '#/definitions/models.ClubCategory'
        type: array
      followers:
        type: integer
      following:
        type: integer
      hidden:
        type: boolean
      is_following:
        type: boolean
      like_count:
        type: integer
      location:
        $ref: '#/definitions/models.Location'
        type: object
      mail:
        type: string
      name:
        type: string
      phone:
        type: string
      profile_photo:
        type: string
      rating:
        type: number
      rating_count:
        type: integer
      share_link:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.GetCreatorPostsResponse:
    properties:
      medias:
        items:
          $ref: '#/definitions/models.GetCreatorPostsResponseMediaModel'
        type: array
      post:
        $ref: '#/definitions/models.GetCreatorPostsResponsePostModel'
        type: object
    type: object
  models.GetCreatorPostsResponseMediaModel:
    properties:
      content_type:
        type: string
      media_url:
        type: string
      order_no:
        type: integer
    type: object
  models.GetCreatorPostsResponseModel:
    properties:
      posts:
        items:
          $ref: '#/definitions/models.GetCreatorPostsResponse'
        type: array
    type: object
  models.GetCreatorPostsResponsePostModel:
    properties:
      caption:
        type: string
      club_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      club_name:
        type: string
      created_at:
        type: string
      creator_id:
        type: string
      creator_photo:
        type: string
      event_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      event_name:
        type: string
      id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      rating:
        type: number
      thumbnail_url:
        type: string
      user_type:
        type: string
    type: object
  models.GetDownloadURLResponseModel:
    properties:
      url:
        type: string
    type: object
  models.GetEventPostsResponseModel:
    properties:
      caption:
        type: string
      club_id:
        type: string
      created_at:
        type: string
      event_id:
        type: string
      post_id:
        type: string
      thumbnail_url:
        type: string
    type: object
  models.GetEventResp:
    properties:
      event:
        $ref: '#/definitions/models.EventModel'
        type: object
      related_events:
        items:
          $ref: '#/definitions/models.EventModel'
        type: array
    type: object
  models.GetEventReviewsItem:
    properties:
      content:
        type: string
      rating:
        type: number
      user:
        properties:
          first_name:
            type: string
          last_name:
            type: string
          profile_photo:
            type: string
        type: object
    type: object
  models.GetEventReviewsResponseModel:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.GetEventReviewsItem'
        type: array
    type: object
  models.GetFollowResponseModel:
    properties:
      first_name:
        type: string
      id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      is_following:
        type: boolean
      last_name:
        type: string
      name:
        type: string
      profile_photo:
        type: string
      username:
        type: string
    type: object
  models.GetNearlyPostsResponse:
    properties:
      medias:
        items:
          $ref: '#/definitions/models.GetNearlyPostsResponseMediaModel'
        type: array
      post:
        $ref: '#/definitions/models.GetNearlyPostsResponsePostModel'
        type: object
    type: object
  models.GetNearlyPostsResponseMediaModel:
    properties:
      caption:
        type: string
      content_type:
        type: string
      media_url:
        type: string
      post_id:
        type: string
    type: object
  models.GetNearlyPostsResponseModel:
    properties:
      posts:
        items:
          $ref: '#/definitions/models.GetNearlyPostsResponse'
        type: array
    type: object
  models.GetNearlyPostsResponsePostModel:
    properties:
      creator_id:
        type: string
      creator_name:
        type: string
      event_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      event_name:
        type: string
      user_type:
        type: string
    type: object
  models.GetNewTokensModel:
    properties:
      id:
        type: string
      refresh_token:
        type: string
    type: object
  models.GetPastEventsResp:
    properties:
      count:
        type: integer
      events:
        items:
          $ref: '#/definitions/models.EventModel'
        type: array
    type: object
  models.GetPreferencesModel:
    properties:
      id:
        type: integer
      is_checked:
        type: boolean
      name:
        type: string
      type:
        type: string
    type: object
  models.GetProfileResponseModel:
    properties:
      accounts:
        items:
          $ref: '#/definitions/models.Account'
        type: array
      bio:
        type: string
      blocked:
        type: boolean
      facebook_linked:
        type: boolean
      first_name:
        type: string
      followers:
        type: integer
      following:
        type: integer
      gender:
        type: string
      hidden:
        type: boolean
      is_following:
        type: boolean
      last_name:
        type: string
      like_count:
        type: integer
      mail:
        type: string
      phone:
        type: string
      profile_photo:
        type: string
      role:
        type: string
      share_link:
        type: string
      special_status:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.GetTypesResponseModel:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        type: string
    type: object
  models.GetUpcomingEventsResp:
    properties:
      count:
        type: integer
      events:
        items:
          $ref: '#/definitions/models.EventModel'
        type: array
    type: object
  models.GoingEventsIdsResp:
    properties:
      ids:
        items:
          type: string
        type: array
    type: object
  models.HidePostsModel:
    properties:
      user_id:
        type: string
    type: object
  models.LikeCountResp:
    properties:
      count:
        type: integer
      liked:
        type: boolean
    type: object
  models.LikeCreateReq:
    properties:
      object_id:
        type: string
      object_type:
        type: string
    required:
    - object_id
    - object_type
    type: object
  models.LikedEventsItem:
    properties:
      club_id:
        type: string
      club_name:
        type: string
      end_date:
        type: string
      end_time:
        type: string
      flyer_url:
        type: string
      going:
        type: boolean
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      share_link:
        type: string
      start_date:
        type: string
      start_time:
        type: string
      status:
        type: string
    type: object
  models.LikedEventsResp:
    properties:
      count:
        type: integer
      events:
        items:
          $ref: '#/definitions/models.LikedEventsItem'
        type: array
    type: object
  models.Location:
    properties:
      lat:
        type: number
      long:
        type: number
    type: object
  models.LoginModel:
    properties:
      fcm_token:
        type: string
      mail:
        type: string
      password:
        type: string
    type: object
  models.LoginResponseModel:
    properties:
      access_token:
        type: string
      id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      mail:
        type: string
      refresh_token:
        type: string
    type: object
  models.Mail:
    properties:
      mail:
        type: string
    type: object
  models.MediaModel:
    properties:
      caption:
        type: string
      comment_count:
        type: integer
      content_type:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      media_id:
        type: string
      media_url:
        type: string
      order_no:
        type: integer
      post_id:
        type: string
      rating:
        type: integer
      share_count:
        type: integer
      thumbnail_url:
        type: string
    type: object
  models.Mention:
    properties:
      user_id:
        type: string
      user_type:
        type: string
      username:
        type: string
    type: object
  models.OperationHours:
    properties:
      end_time:
        type: string
      is_closed:
        type: boolean
      parties:
        items:
          $ref: '#/definitions/models.Party'
        type: array
      start_time:
        type: string
      weekday:
        type: integer
    type: object
  models.ParticipantModel:
    properties:
      object_id:
        type: string
      object_type:
        type: string
    type: object
  models.ParticipatedEventsItem:
    properties:
      club_id:
        type: string
      club_name:
        type: string
      end_date:
        type: string
      end_time:
        type: string
      flyer_url:
        type: string
      going:
        type: boolean
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      share_link:
        type: string
      start_date:
        type: string
      start_time:
        type: string
      status:
        type: string
    type: object
  models.ParticipatedEventsResp:
    properties:
      count:
        type: integer
      events:
        items:
          $ref: '#/definitions/models.ParticipatedEventsItem'
        type: array
    type: object
  models.Party:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Picture:
    properties:
      data:
        $ref: '#/definitions/models.Data'
        type: object
    type: object
  models.PostCommentsItem:
    properties:
      comment_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      photo:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      user_type:
        type: string
      username:
        type: string
    type: object
  models.PostCommentsResp:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.PostCommentsItem'
        type: array
      count:
        type: integer
    type: object
  models.PostDetailsModel:
    properties:
      review:
        $ref: '#/definitions/models.PostDetailsReview'
        type: object
    type: object
  models.PostDetailsReview:
    properties:
      content:
        type: string
      id:
        type: string
      photo:
        type: string
      rating:
        type: number
      user_id:
        type: string
      user_type:
        type: string
    type: object
  models.PostMediaModel:
    properties:
      caption:
        type: string
      created_at:
        type: string
      creator_id:
        type: string
      creator_photo:
        type: string
      event_id:
        type: string
      event_name:
        type: string
      id:
        type: string
      medias:
        items:
          $ref: '#/definitions/models.MediaModel'
        type: array
      rating:
        $ref: '#/definitions/models.Rating'
        type: object
      review:
        $ref: '#/definitions/models.ReviewModel'
        type: object
      thumbnail_url:
        type: string
      user_type:
        type: string
    type: object
  models.Rating:
    properties:
      count:
        type: integer
      value:
        type: number
    type: object
  models.RegisterConfirmModel:
    properties:
      code:
        type: string
      mail:
        type: string
    type: object
  models.RegisterConfirmResponseModel:
    properties:
      answer:
        type: string
      is_verified:
        type: boolean
    type: object
  models.RegisterModel:
    properties:
      mail:
        type: string
      password:
        type: string
    type: object
  models.RegisterResponseModel:
    properties:
      access_token:
        type: string
      id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      is_verified:
        type: boolean
      mail:
        type: string
      password:
        type: string
      refresh_token:
        type: string
    type: object
  models.RegisterUserModel:
    properties:
      bio:
        type: string
      fcm_token:
        type: string
      first_name:
        type: string
      gender:
        enum:
        - male
        - female
        - other
        type: string
      last_name:
        type: string
      mail:
        type: string
      phone:
        type: string
      profile_photo:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.ReportUserModel:
    properties:
      message:
        type: string
      object_id:
        type: string
      object_type:
        type: string
    type: object
  models.ResponseError:
    properties:
      error:
        type: object
    type: object
  models.ReviewCreateReqModel:
    properties:
      club_id:
        type: string
      content:
        type: string
      object_id:
        type: string
      object_type:
        type: string
      rating:
        type: number
    required:
    - club_id
    - content
    - object_id
    - object_type
    type: object
  models.ReviewModel:
    properties:
      club_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      object_id:
        type: string
      object_type:
        type: string
      rating:
        type: number
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      user_type:
        type: string
    type: object
  models.SearchClub:
    properties:
      address:
        type: string
      id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      location:
        $ref: '#/definitions/models.Location'
        type: object
      name:
        type: string
      profile_photo:
        type: string
      username:
        type: string
    type: object
  models.SearchClubModel:
    properties:
      clubs:
        items:
          $ref: '#/definitions/models.SearchClub'
        type: array
    type: object
  models.SearchEvent:
    properties:
      club_username:
        type: string
      id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      is_live:
        type: boolean
      name:
        type: string
      profile_photo:
        type: string
      share_count:
        type: integer
      user_name:
        type: string
    type: object
  models.SearchEventModel:
    properties:
      clubs:
        items:
          $ref: '#/definitions/models.SearchEvent'
        type: array
    type: object
  models.SearchModel:
    properties:
      clients:
        items:
          $ref: '#/definitions/models.ClientModel'
        type: array
      clubs:
        items:
          $ref: '#/definitions/models.ClubModel'
        type: array
      events:
        items:
          $ref: '#/definitions/models.EventModel'
        type: array
    type: object
  models.SendCodeResponse:
    properties:
      id:
        type: string
    type: object
  models.SetFcmToken:
    properties:
      fcm_token:
        type: string
    type: object
  models.SetPassword:
    properties:
      code:
        type: string
      id:
        type: string
      mail:
        type: string
      new_password:
        type: string
    type: object
  models.ShareModel:
    properties:
      created_at:
        type: string
      id:
        type: string
      object_id:
        type: string
      object_type:
        type: string
      user_id:
        type: string
      user_type:
        type: string
    type: object
  models.SocialRegisterModel:
    properties:
      bio:
        type: string
      fcm_token:
        type: string
      first_name:
        type: string
      gender:
        enum:
        - male
        - female
        - other
        type: string
      id:
        type: string
      last_name:
        type: string
      mail:
        type: string
      phone:
        type: string
      profile_photo:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.SuccessModel:
    type: object
  models.SwitchToClientResponseModel:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.SwitchToClubModel:
    properties:
      club_id:
        type: string
    type: object
  models.SwitchToClubResponseModel:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.Type:
    properties:
      id:
        type: integer
    type: object
  models.UpdateClubRequestModel:
    properties:
      about:
        type: string
      address:
        type: string
      categories:
        items:
          $ref: '#/definitions/models.Type'
        type: array
      location:
        $ref: '#/definitions/models.Location'
        type: object
      name:
        type: string
      phone:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.UpdateProfileRequestModel:
    properties:
      bio:
        type: string
      first_name:
        type: string
      gender:
        enum:
        - male
        - female
        - other
        type: string
      last_name:
        type: string
      phone:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.UploadProfilePhotoModel:
    properties:
      media_id:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
    type: object
  models.UploadURLRequestModel:
    properties:
      upload_file_objects:
        items:
          $ref: '#/definitions/models.uploadFileObject'
        type: array
    type: object
  models.UploadURLResponseModel:
    properties:
      upload_urls:
        items:
          $ref: '#/definitions/models.uploadURL'
        type: array
    type: object
  models.User:
    properties:
      id:
        type: string
      name:
        type: string
      profile_photo:
        type: string
      type:
        type: string
      username:
        type: string
    type: object
  models.eventCount:
    properties:
      count:
        type: integer
      date:
        type: string
      event_ids:
        items:
          type: string
        type: array
    type: object
  models.geozone:
    properties:
      geometry:
        type: string
      id:
        type: string
      name:
        type: string
      parent_id:
        type: string
    type: object
  models.uploadFileObject:
    properties:
      content_type:
        type: string
      metadata:
        type: string
    type: object
  models.uploadURL:
    properties:
      filename:
        example: 965b0929-82e1-4a53-ad0b-a16f50c99573
        type: string
      metadata:
        type: string
      url:
        type: string
    type: object
info:
  contact: {}
  license: {}
paths:
  /v1/calendar/:
    get:
      parameters:
      - description: Begin date
        in: query
        name: begin_date
        required: true
        type: string
      - description: End date
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventCountModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Users liked and going events count by day
      tags:
      - event
  /v1/check_code/:
    post:
      consumes:
      - application/json
      description: Check Code - API for checking code
      parameters:
      - description: check code
        in: body
        name: check_code
        required: true
        schema:
          $ref: '#/definitions/models.RegisterConfirmModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: CheckCode
      tags:
      - login
  /v1/check_mail/:
    post:
      consumes:
      - application/json
      description: |-
        Check Mail API is for getting mail, generating code
        and sending it to mail
      parameters:
      - description: check mail
        in: body
        name: check_mail
        required: true
        schema:
          $ref: '#/definitions/models.CheckMailModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Check Mail
      tags:
      - profile
  /v1/check_username/:
    post:
      consumes:
      - application/json
      description: Check Field API for checking usernames or mails of users
      parameters:
      - description: check field
        in: body
        name: check_field
        required: true
        schema:
          $ref: '#/definitions/models.CheckFieldModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CheckFieldResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Check Field
      tags:
      - user
  /v1/clients/{client_id}/followers/:
    get:
      consumes:
      - application/json
      description: |-
        Get followers API returns all followers of a client
        according given ID
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetFollowResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get followers
      tags:
      - profile
  /v1/clients/{client_id}/following/:
    get:
      consumes:
      - application/json
      description: |-
        Get following API returns all following of a client
        according given ID
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetFollowResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get following
      tags:
      - profile
  /v1/clients/{client_id}/posts/:
    get:
      consumes:
      - application/json
      description: |-
        Get Creator Posts API returns all posts of creator
        according given ID
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCreatorPostsResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Creator Posts
      tags:
      - post
  /v1/clients/{client_id}/preferences/:
    get:
      consumes:
      - application/json
      description: Get Preference API for get preferences
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetPreferencesModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Preferences
      tags:
      - profile
  /v1/clients/{client_id}/profile/:
    get:
      consumes:
      - application/json
      description: |-
        Get Profile API returns a profile of a client according
        given ID
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetProfileResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Profile
      tags:
      - profile
  /v1/clients/{client_id}/reviews/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      - description: page default 1
        in: query
        name: page
        type: string
      - description: page_size default 10
        in: query
        name: page_size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClientReviewsModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - profile
  /v1/clients/block/:
    post:
      consumes:
      - application/json
      description: Block client API for blocking clients
      parameters:
      - description: Block client
        in: body
        name: BlockClient
        required: true
        schema:
          $ref: '#/definitions/models.BlockClientRequestModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Block client
      tags:
      - profile
  /v1/clients/create/preferences/:
    post:
      consumes:
      - application/json
      description: Create Preference API for creating preferences
      parameters:
      - description: Create preferences
        in: body
        name: CreatePreferences
        required: true
        schema:
          $ref: '#/definitions/models.CreatePreferencesModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreatePreferencesModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create Preferences
      tags:
      - profile
  /v1/clients/delete_follower/:
    delete:
      consumes:
      - application/json
      description: DeleteFollower API is for deleting a follower
      parameters:
      - description: delete follower
        in: body
        name: delete_follower
        required: true
        schema:
          $ref: '#/definitions/models.DeleteFollowerModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: DeleteFollower
      tags:
      - profile
  /v1/clients/follow/:
    post:
      consumes:
      - application/json
      description: Follow API is for requesting a follow for a client or club
      parameters:
      - description: follow user
        in: body
        name: follow_user
        required: true
        schema:
          $ref: '#/definitions/models.FollowRequestModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Follow
      tags:
      - profile
  /v1/clients/switch/:
    post:
      consumes:
      - application/json
      description: |-
        Switch to club API switches to club
        from client account
      parameters:
      - description: Switch to club
        in: body
        name: switchToClub
        required: true
        schema:
          $ref: '#/definitions/models.SwitchToClubModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SwitchToClubResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Switch to club
      tags:
      - profile
  /v1/clients/unfollow/:
    delete:
      consumes:
      - application/json
      description: Unfollow API is for unfollowing a client or club
      parameters:
      - description: unfollow user
        in: body
        name: unfollow_user
        required: true
        schema:
          $ref: '#/definitions/models.FollowRequestModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Unfollow
      tags:
      - profile
  /v1/clients/update/:
    put:
      consumes:
      - application/json
      description: Update Client API is for updating client
      parameters:
      - description: update client
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateProfileRequestModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update Client
      tags:
      - profile
  /v1/clients/update/preferences/:
    put:
      consumes:
      - application/json
      description: Update Preference API for update preferences
      parameters:
      - description: Update preferences
        in: body
        name: UpdatePreferences
        required: true
        schema:
          $ref: '#/definitions/models.CreatePreferencesModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreatePreferencesModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update Preferences
      tags:
      - profile
  /v1/clients/upload/profile_photo/:
    post:
      consumes:
      - application/json
      description: |-
        Upload Profile Photo API upload avatar photo
        according given mediaID
      parameters:
      - description: upload
        in: body
        name: upload
        required: true
        schema:
          $ref: '#/definitions/models.UploadProfilePhotoModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Upload Client Profile Photo
      tags:
      - profile
  /v1/club/{club_id}/past_events/:
    get:
      parameters:
      - description: club id
        in: path
        name: club_id
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetPastEventsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get club Past Events
      tags:
      - event
  /v1/club/{club_id}/upcoming_events/:
    get:
      parameters:
      - description: club id
        in: path
        name: club_id
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUpcomingEventsResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get club Upcoming Events
      tags:
      - event
  /v1/clubs/:
    post:
      consumes:
      - application/json
      parameters:
      - description: club
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/models.CreateClubRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateClubResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create Club
      tags:
      - club
  /v1/clubs/{club_id}/club_events/:
    get:
      parameters:
      - description: club id
        in: path
        name: club_id
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllClubEventsResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get All Club Events
      tags:
      - event
  /v1/clubs/{club_id}/club_info/:
    get:
      consumes:
      - application/json
      description: Get club info API is for getting club info
      parameters:
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClubInfoModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: GetClubInfo
      tags:
      - club
  /v1/clubs/{club_id}/events/:
    get:
      consumes:
      - application/json
      description: Get Profile API get by now events events
      parameters:
      - description: club_id
        in: path
        name: club_id
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetByNowEventsResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get by now Events
      tags:
      - event
  /v1/clubs/{club_id}/followers/:
    get:
      consumes:
      - application/json
      description: |-
        Get followers API returns all followers of a club
        according given Id
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetFollowResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get followers
      tags:
      - club
  /v1/clubs/{club_id}/following/:
    get:
      consumes:
      - application/json
      description: |-
        Get following API returns all followings of a club
        according given Id
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetFollowResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get following
      tags:
      - club
  /v1/clubs/{club_id}/profile/:
    get:
      parameters:
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetClubResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Club Profile
      tags:
      - club
  /v1/clubs/{club_id}/rating/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClubRatingModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - club
  /v1/clubs/{club_id}/reviews/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Club ID
        in: path
        name: club_id
        required: true
        type: string
      - description: page default 1
        in: query
        name: page
        type: string
      - description: page_size default 10
        in: query
        name: page_size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClubReviewsModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - club
  /v1/clubs/{club_id}/search_events/:
    get:
      parameters:
      - description: club id
        in: path
        name: club_id
        required: true
        type: string
      - description: event name
        in: query
        name: name
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchEventModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Search Events
      tags:
      - club
  /v1/clubs/create/club_info/:
    post:
      consumes:
      - application/json
      description: Create club info API is for creating club info
      parameters:
      - description: create club info
        in: body
        name: create_club_info
        required: true
        schema:
          $ref: '#/definitions/models.CreateClubInfoModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClubInfoModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: CreateClubInfo
      tags:
      - club
  /v1/clubs/delete_follower/:
    delete:
      consumes:
      - application/json
      description: DeleteFollower API is for deleting a follower
      parameters:
      - description: delete follower
        in: body
        name: delete_follower
        required: true
        schema:
          $ref: '#/definitions/models.DeleteFollowerModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: DeleteFollower
      tags:
      - club
  /v1/clubs/follow/:
    post:
      consumes:
      - application/json
      description: Follow API is for requesting a follow for a client or club
      parameters:
      - description: follow user
        in: body
        name: follow_user
        required: true
        schema:
          $ref: '#/definitions/models.FollowRequestModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Follow
      tags:
      - club
  /v1/clubs/switch/:
    post:
      consumes:
      - application/json
      description: |-
        Switch to client API switches to cient
        from club account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SwitchToClientResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Switch to client
      tags:
      - club
  /v1/clubs/unfollow/:
    delete:
      consumes:
      - application/json
      description: Unfollow API is for unfollowing a client or club
      parameters:
      - description: unfollow user
        in: body
        name: unfollow_user
        required: true
        schema:
          $ref: '#/definitions/models.FollowRequestModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Unfollow
      tags:
      - club
  /v1/clubs/update/:
    put:
      consumes:
      - application/json
      description: Update Club API is for updating clubs
      parameters:
      - description: update club
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.UpdateClubRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateClubRequestModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update Club
      tags:
      - club
  /v1/clubs/update/club_info/:
    put:
      consumes:
      - application/json
      description: Update club info API is for updating club info
      parameters:
      - description: update club info
        in: body
        name: update_club_info
        required: true
        schema:
          $ref: '#/definitions/models.CreateClubInfoModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClubInfoModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: UpdateClubInfo
      tags:
      - club
  /v1/clubs/upload/profile_photo/:
    post:
      consumes:
      - application/json
      description: |-
        Upload Profile Photo API upload avatar photo for a club
        according given mediaID
      parameters:
      - description: upload
        in: body
        name: upload
        required: true
        schema:
          $ref: '#/definitions/models.UploadProfilePhotoModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Upload Club Profile Photo
      tags:
      - club
  /v1/comments/:
    post:
      consumes:
      - application/json
      parameters:
      - description: comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.CommentCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommentCreateResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.StdResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - comment
  /v1/confirm_mail/:
    post:
      consumes:
      - application/json
      description: Confirm Mail API is for confirming mail with code
      parameters:
      - description: confirm mail
        in: body
        name: confirm_mail
        required: true
        schema:
          $ref: '#/definitions/models.ConfirmMailModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ConfirmMailResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Confirm Mail
      tags:
      - profile
  /v1/events/:
    get:
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: page_size
        in: query
        name: page_size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllEventsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get All Events
      tags:
      - event
    post:
      consumes:
      - application/json
      description: Get Profile API creates events
      parameters:
      - description: createEvent
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequestModel'
      produces:
      - application/json
      responses:
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create event
      tags:
      - event
    put:
      consumes:
      - application/json
      description: Get Profile API updates events
      parameters:
      - description: updateEvent
        in: body
        name: club_id
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequestModel'
      produces:
      - application/json
      responses:
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update event
      tags:
      - event
  /v1/events/{event_id}/:
    get:
      consumes:
      - application/json
      description: Get Event API returns event
      parameters:
      - description: Event Id
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetEventResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Event
      tags:
      - event
  /v1/events/{event_id}/reviews/:
    get:
      consumes:
      - application/json
      description: Get event reviews
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      - description: page num default 1
        in: query
        name: page
        type: integer
      - description: page size default 10
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetEventReviewsResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: GetEventReviews
      tags:
      - event
  /v1/events/delete_event/:
    delete:
      consumes:
      - application/json
      description: DeleteEvent API is for deleting an event
      parameters:
      - description: delete event
        in: body
        name: delete_event
        required: true
        schema:
          $ref: '#/definitions/models.DeleteEventModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: DeleteEvent
      tags:
      - event
  /v1/featured_types/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetTypesResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Featured Types
      tags:
      - type
  /v1/filter/:
    get:
      consumes:
      - application/json
      description: Filter Events
      parameters:
      - description: happening_now
        in: query
        name: happening_now
        type: boolean
      - description: begin_date
        in: query
        name: begin_date
        type: string
      - description: end_date
        in: query
        name: end_date
        type: string
      - description: event_types may be array
        in: query
        name: event_types
        type: integer
      - description: music_types may be array
        in: query
        name: music_types
        type: integer
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FilterResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Filter Events
      tags:
      - search
  /v1/geozones/:
    get:
      consumes:
      - application/json
      description: Get Geozones
      parameters:
      - description: Parent ID
        in: query
        name: parent_id
        type: string
      - description: PAGE
        in: query
        name: page
        type: integer
      - description: PAGE
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeozoneModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Geozones
      tags:
      - geo
  /v1/get_all_users/:
    get:
      consumes:
      - application/json
      description: Search Venue, CLuber, Event
      parameters:
      - description: name or username
        in: query
        name: name
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllUsersModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Search
      tags:
      - search
  /v1/get_by_location/{long}/{lat}/:
    get:
      consumes:
      - application/json
      description: |-
        Get By Location API returns the nearest club and current event in this club
        according given Longitude and Lattitude
      parameters:
      - description: long
        in: path
        name: long
        required: true
        type: string
      - description: log
        in: path
        name: lat
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetClubAndEventResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Club and Event for autocomplete
      tags:
      - post
  /v1/get_event_posts/{event_id}/:
    get:
      parameters:
      - description: event id
        in: path
        name: event_id
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetEventPostsResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Event Posts
      tags:
      - post
  /v1/get_following_posts/:
    get:
      consumes:
      - application/json
      description: Get Following Posts API returns user followings posts
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetNearlyPostsResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Following Posts
      tags:
      - post
  /v1/get_nearly_posts/{long}/{lat}/:
    get:
      consumes:
      - application/json
      description: |-
        Get Nearly Posts API returns posts order by location
        according given Long and Lat
      parameters:
      - description: Long
        in: path
        name: long
        required: true
        type: string
      - description: Lat
        in: path
        name: lat
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetNearlyPostsResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Nearly Posts
      tags:
      - post
  /v1/get_tokens/:
    post:
      consumes:
      - application/json
      description: |-
        Get Tokens API is for getting new tokens
        if old one is expired or client should be upgraded
      parameters:
      - description: get tokens
        in: body
        name: get_tokens
        required: true
        schema:
          $ref: '#/definitions/models.GetNewTokensModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SwitchToClientResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Tokens
      tags:
      - profile
  /v1/going/:
    post:
      consumes:
      - application/json
      description: Going - API for going to events
      parameters:
      - description: going
        in: body
        name: going
        required: true
        schema:
          $ref: '#/definitions/models.ParticipantModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Going
      tags:
      - going
  /v1/going_count/{object_type}/{object_id}/:
    get:
      consumes:
      - application/json
      description: Going Count - API for going count to events
      parameters:
      - description: object_type
        in: path
        name: object_type
        required: true
        type: string
      - description: object_id
        in: path
        name: object_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: GoingCount
      tags:
      - going
  /v1/going_delete/:
    delete:
      consumes:
      - application/json
      description: Going Delete - API for delete going to events
      parameters:
      - description: going
        in: body
        name: going
        required: true
        schema:
          $ref: '#/definitions/models.ParticipantModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: GoingDelete
      tags:
      - going
  /v1/going_events_ids/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GoingEventsIdsResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: User's Events Ids
      tags:
      - going
  /v1/like/:
    post:
      consumes:
      - application/json
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LikeCreateReq'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.StdResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - like
  /v1/like_count/{object_type}/{object_id}/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Object Type
        in: path
        name: object_type
        required: true
        type: string
      - description: Object ID
        in: path
        name: object_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LikeCountResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - like
  /v1/liked_events/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LikedEventsResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - like
  /v1/link_facebook/:
    post:
      consumes:
      - application/json
      description: Link Facebook API is for linking facebook account
      parameters:
      - description: link facebook
        in: body
        name: link_facebook
        required: true
        schema:
          $ref: '#/definitions/models.FbLinkModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Link Facebook
      tags:
      - profile
  /v1/login/:
    post:
      consumes:
      - application/json
      description: |-
        Login API is for signing in to app
        It also refreshes both tokens
      parameters:
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginModel'
      produces:
      - application/json
      responses:
        "200":
          description: login response
          schema:
            $ref: '#/definitions/models.LoginResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Login
      tags:
      - login
  /v1/login/apple/:
    post:
      consumes:
      - application/json
      description: |-
        Apple login - API for getting users
        info from apple
      parameters:
      - description: apple_login
        in: body
        name: apple_login
        required: true
        schema:
          $ref: '#/definitions/models.AppleLoginModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AppleLoginResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Apple login
      tags:
      - register
  /v1/login/facebook/:
    post:
      consumes:
      - application/json
      description: |-
        Facebook login - API for getting users
        info from Facebook
      parameters:
      - description: fb_login
        in: body
        name: fb_login
        required: true
        schema:
          $ref: '#/definitions/models.FbLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FbLoginResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Facebook login
      tags:
      - register
  /v1/logout/{client_id}:
    put:
      description: Logout API is for setting user fcm token
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - login
  /v1/media/download/{filename}/:
    get:
      consumes:
      - application/json
      description: Get Download URL is an API for getting URL to download media
      parameters:
      - description: Filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetDownloadURLResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Download URL
      tags:
      - media
  /v1/media/upload/:
    post:
      consumes:
      - application/json
      description: Get Upload URL is an API for getting URLs to upload media
      parameters:
      - description: upload Urls
        in: body
        name: uploadUrls
        required: true
        schema:
          $ref: '#/definitions/models.UploadURLRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UploadURLResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Upload URL
      tags:
      - media
  /v1/posts/:
    post:
      consumes:
      - application/json
      description: Create - API for creating a new post
      parameters:
      - description: post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostResponseModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreatePostResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create Post
      tags:
      - post
  /v1/posts/{post_id}/:
    delete:
      consumes:
      - application/json
      description: Post Delete API is for deleting post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Post Delete
      tags:
      - post
    get:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostMediaModel'
      security:
      - ApiKeyAuth: []
      tags:
      - post
  /v1/posts/{post_id}/comments/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: page default 1
        in: query
        name: page
        type: string
      - description: page_size default 10
        in: query
        name: page_size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostCommentsResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - post
  /v1/posts/{post_id}/details/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostDetailsModel'
      security:
      - ApiKeyAuth: []
      tags:
      - post
  /v1/register/:
    post:
      consumes:
      - application/json
      description: Register - API for registering users
      parameters:
      - description: register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.RegisterModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Register
      tags:
      - register
  /v1/register/apple/:
    post:
      consumes:
      - application/json
      description: |-
        Apple register - API for registering users
        that logged in with apple
      parameters:
      - description: facebook register
        in: body
        name: fb_register
        required: true
        schema:
          $ref: '#/definitions/models.SocialRegisterModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialRegisterModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Apple register
      tags:
      - register
  /v1/register/facebook/:
    post:
      consumes:
      - application/json
      description: |-
        Facebook register - API for registering users
        that logged in with Facebook
      parameters:
      - description: facebook register
        in: body
        name: fb_register
        required: true
        schema:
          $ref: '#/definitions/models.SocialRegisterModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialRegisterModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Facebook register
      tags:
      - register
  /v1/register_confirm/:
    post:
      consumes:
      - application/json
      description: Register - API for confirming email of a user
      parameters:
      - description: register_confirm
        in: body
        name: register_confirm
        required: true
        schema:
          $ref: '#/definitions/models.RegisterConfirmModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterConfirmResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Register confirm
      tags:
      - register
  /v1/register_user/:
    post:
      consumes:
      - application/json
      description: |-
        Register user - API for creating a user
        in a clients or clubs table
      parameters:
      - description: register_user
        in: body
        name: register_user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterUserModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - register
  /v1/reviews/:
    post:
      consumes:
      - application/json
      parameters:
      - description: review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.ReviewCreateReqModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReviewModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.StdResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create review
      tags:
      - review
  /v1/search/:
    get:
      consumes:
      - application/json
      description: Search Venue, CLuber, Event
      parameters:
      - description: search
        in: query
        name: search
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Search
      tags:
      - search
  /v1/search/clients/:
    get:
      consumes:
      - application/json
      description: Search Client
      parameters:
      - description: search
        in: query
        name: search
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ClientModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Search Client
      tags:
      - search
  /v1/search/clubs/:
    get:
      parameters:
      - description: club name
        in: query
        name: name
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchClubModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Search Clubs
      tags:
      - club
  /v1/search/user_clubs/:
    get:
      parameters:
      - description: club name
        in: query
        name: name
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchClubModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get My Clubs
      tags:
      - club
  /v1/send_code/:
    post:
      consumes:
      - application/json
      description: Send Code - API for sending code
      parameters:
      - description: mail
        in: body
        name: mail
        required: true
        schema:
          $ref: '#/definitions/models.Mail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SendCodeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: SendCode
      tags:
      - login
  /v1/set_fcm_token/:
    post:
      consumes:
      - application/json
      description: Set Fcm Token API is for setting user fcm token
      parameters:
      - description: set fcm token
        in: body
        name: set_fcm_token
        required: true
        schema:
          $ref: '#/definitions/models.SetFcmToken'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Set Fcm Token
      tags:
      - profile
  /v1/set_password/:
    post:
      consumes:
      - application/json
      description: Check Code - API for checking code
      parameters:
      - description: check code
        in: body
        name: check_code
        required: true
        schema:
          $ref: '#/definitions/models.SetPassword'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: CheckCode
      tags:
      - login
  /v1/share/:
    post:
      consumes:
      - application/json
      description: Create share API is for sharing posts, users, events
      parameters:
      - description: review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.CreateShareModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ShareModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create share
      tags:
      - review
  /v1/top/:
    get:
      consumes:
      - application/json
      description: Top Venue, Clubber, Event
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Top
      tags:
      - search
  /v1/types/:
    get:
      parameters:
      - description: type
        in: query
        name: type
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetTypesResponseModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Types
      tags:
      - type
  /v1/unlike/:
    delete:
      consumes:
      - application/json
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LikeCreateReq'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      tags:
      - like
  /v1/users/{user_id}/going_events/:
    get:
      consumes:
      - application/json
      description: Get going events - API for getting users's going events
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: page num default 1
        in: query
        name: page
        type: integer
      - description: page size default 10
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParticipatedEventsResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Participated events
      tags:
      - going
  /v1/users/{user_id}/mentioned_posts/:
    get:
      consumes:
      - application/json
      description: |-
        Get Mentioned Posts API returns all posts of mentioned
        according given ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCreatorPostsResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Mentioned Posts
      tags:
      - post
  /v1/users/block/:
    post:
      consumes:
      - application/json
      description: Block User API is for blocking a client or club
      parameters:
      - description: block user
        in: body
        name: block_user
        required: true
        schema:
          $ref: '#/definitions/models.BlockUserModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Block User
      tags:
      - user
  /v1/users/delete_follower/:
    delete:
      consumes:
      - application/json
      description: DeleteFollower API is for deleting a follower
      parameters:
      - description: delete follower
        in: body
        name: delete_follower
        required: true
        schema:
          $ref: '#/definitions/models.DeleteFollowerModel'
      produces:
      - application/json
      responses:
        "200": {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: DeleteFollower
      tags:
      - user
  /v1/users/follow/:
    post:
      consumes:
      - application/json
      description: Follow API is for requesting a follow for a client or club
      parameters:
      - description: follow user
        in: body
        name: follow_user
        required: true
        schema:
          $ref: '#/definitions/models.FollowRequestModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Follow
      tags:
      - user
  /v1/users/hide_posts/:
    post:
      consumes:
      - application/json
      description: Hide Posts API is for hiding posts from a client or club
      parameters:
      - description: hide posts
        in: body
        name: hide_posts
        required: true
        schema:
          $ref: '#/definitions/models.HidePostsModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Hide Posts
      tags:
      - user
  /v1/users/report/:
    post:
      consumes:
      - application/json
      description: Report User API is for report a client or club
      parameters:
      - description: report user
        in: body
        name: report_user
        required: true
        schema:
          $ref: '#/definitions/models.ReportUserModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Report User
      tags:
      - user
  /v1/users/unblock/:
    delete:
      consumes:
      - application/json
      description: Unblock User API is for unblocking a client or club
      parameters:
      - description: unblock user
        in: body
        name: unblock_user
        required: true
        schema:
          $ref: '#/definitions/models.BlockUserModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Unblock User
      tags:
      - user
  /v1/users/unfollow/:
    delete:
      consumes:
      - application/json
      description: Unfollow API is for unfollowing a client or club
      parameters:
      - description: unfollow user
        in: body
        name: unfollow_user
        required: true
        schema:
          $ref: '#/definitions/models.FollowRequestModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Unfollow
      tags:
      - user
  /v1/users/unhide_posts/:
    delete:
      consumes:
      - application/json
      description: Unide Posts API is for unhiding posts from a client or club
      parameters:
      - description: unhide posts
        in: body
        name: unhide_posts
        required: true
        schema:
          $ref: '#/definitions/models.HidePostsModel'
      produces:
      - application/json
      responses:
        "200": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Unhide Posts
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
