// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scope_service.proto

package auth_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetAllScopesResponse struct {
	Scopes               []*Scope `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllScopesResponse) Reset()         { *m = GetAllScopesResponse{} }
func (m *GetAllScopesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllScopesResponse) ProtoMessage()    {}
func (*GetAllScopesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e29a63a3ac57cfee, []int{0}
}

func (m *GetAllScopesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllScopesResponse.Unmarshal(m, b)
}
func (m *GetAllScopesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllScopesResponse.Marshal(b, m, deterministic)
}
func (m *GetAllScopesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllScopesResponse.Merge(m, src)
}
func (m *GetAllScopesResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllScopesResponse.Size(m)
}
func (m *GetAllScopesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllScopesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllScopesResponse proto.InternalMessageInfo

func (m *GetAllScopesResponse) GetScopes() []*Scope {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *GetAllScopesResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*GetAllScopesResponse)(nil), "genproto.GetAllScopesResponse")
}

func init() { proto.RegisterFile("scope_service.proto", fileDescriptor_e29a63a3ac57cfee) }

var fileDescriptor_e29a63a3ac57cfee = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xd3, 0x16, 0x83, 0x8c, 0x82, 0xb8, 0x56, 0x1b, 0x22, 0x48, 0xd9, 0x8b, 0x3d, 0x6d,
	0xa0, 0x22, 0x1e, 0x3c, 0xb5, 0x55, 0x7a, 0xf2, 0x92, 0xd2, 0x8b, 0x17, 0x69, 0xd3, 0x31, 0x15,
	0xd6, 0x6c, 0xcc, 0x4e, 0x84, 0xde, 0xfc, 0xe9, 0x92, 0x1d, 0x97, 0x6a, 0xbc, 0xcd, 0x7c, 0xf3,
	0x66, 0x76, 0xde, 0x2c, 0x9c, 0xd9, 0xcc, 0x94, 0xf8, 0x62, 0xb1, 0xfa, 0x7c, 0xcb, 0x50, 0x95,
	0x95, 0x21, 0x23, 0x0e, 0x73, 0x2c, 0x5c, 0x14, 0x5f, 0xe6, 0xc6, 0xe4, 0x1a, 0x13, 0x97, 0xad,
	0xeb, 0xd7, 0x04, 0xdf, 0x4b, 0xda, 0xb1, 0x2c, 0x86, 0x55, 0x4d, 0x5b, 0x8e, 0xe5, 0x12, 0xfa,
	0x73, 0xa4, 0x89, 0xd6, 0x8b, 0x66, 0x9e, 0x4d, 0xd1, 0x96, 0xa6, 0xb0, 0x28, 0xae, 0x21, 0x74,
	0x2f, 0xd8, 0xa8, 0x33, 0xec, 0x8d, 0x8e, 0xc6, 0x27, 0xca, 0xcf, 0x56, 0x4e, 0x99, 0xfe, 0x94,
	0x45, 0x1f, 0x0e, 0x32, 0x53, 0x17, 0x14, 0x75, 0x87, 0x9d, 0x51, 0x2f, 0xe5, 0x64, 0xfc, 0xd5,
	0x85, 0x63, 0xa7, 0x5b, 0xf0, 0x82, 0xe2, 0x16, 0xc2, 0x59, 0x85, 0x2b, 0x42, 0xd1, 0x9e, 0x14,
	0x47, 0x7b, 0xc0, 0x12, 0xbf, 0x84, 0x0c, 0xc4, 0x3d, 0x84, 0x0f, 0xa8, 0x91, 0x50, 0x0c, 0xf6,
	0x2a, 0x26, 0x29, 0x7e, 0xd4, 0x68, 0x29, 0xbe, 0x50, 0xec, 0x55, 0x79, 0xaf, 0xea, 0xb1, 0xf1,
	0x2a, 0x03, 0x31, 0x83, 0x90, 0xbd, 0xfd, 0x6e, 0x66, 0xe2, 0x9b, 0xaf, 0xda, 0x85, 0xbf, 0x67,
	0x90, 0x81, 0xb8, 0x83, 0xd3, 0x39, 0xd2, 0x74, 0xb7, 0xac, 0xf4, 0xa4, 0xd8, 0x3c, 0x21, 0x6d,
	0xcd, 0xe6, 0xbf, 0x87, 0x36, 0x90, 0xc1, 0x74, 0xf0, 0x7c, 0xee, 0x59, 0xd2, 0x1c, 0xdc, 0xff,
	0xd5, 0x3a, 0x74, 0xec, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x78, 0xdc, 0xd7, 0xbe, 0xc3, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ScopeServiceClient is the client API for ScopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScopeServiceClient interface {
	Create(ctx context.Context, in *Scope, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllScopesResponse, error)
	GetByUrlAndMethod(ctx context.Context, in *Scope, opts ...grpc.CallOption) (*Scope, error)
}

type scopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScopeServiceClient(cc grpc.ClientConnInterface) ScopeServiceClient {
	return &scopeServiceClient{cc}
}

func (c *scopeServiceClient) Create(ctx context.Context, in *Scope, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.ScopeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ScopeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllScopesResponse, error) {
	out := new(GetAllScopesResponse)
	err := c.cc.Invoke(ctx, "/genproto.ScopeService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) GetByUrlAndMethod(ctx context.Context, in *Scope, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, "/genproto.ScopeService/GetByUrlAndMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopeServiceServer is the server API for ScopeService service.
type ScopeServiceServer interface {
	Create(context.Context, *Scope) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllScopesResponse, error)
	GetByUrlAndMethod(context.Context, *Scope) (*Scope, error)
}

// UnimplementedScopeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScopeServiceServer struct {
}

func (*UnimplementedScopeServiceServer) Create(ctx context.Context, req *Scope) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedScopeServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedScopeServiceServer) GetAll(ctx context.Context, req *GetAllRequest) (*GetAllScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedScopeServiceServer) GetByUrlAndMethod(ctx context.Context, req *Scope) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUrlAndMethod not implemented")
}

func RegisterScopeServiceServer(s *grpc.Server, srv ScopeServiceServer) {
	s.RegisterService(&_ScopeService_serviceDesc, srv)
}

func _ScopeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ScopeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).Create(ctx, req.(*Scope))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ScopeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ScopeService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_GetByUrlAndMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).GetByUrlAndMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ScopeService/GetByUrlAndMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).GetByUrlAndMethod(ctx, req.(*Scope))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScopeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.ScopeService",
	HandlerType: (*ScopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ScopeService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ScopeService_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ScopeService_GetAll_Handler,
		},
		{
			MethodName: "GetByUrlAndMethod",
			Handler:    _ScopeService_GetByUrlAndMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scope_service.proto",
}
