// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: co_branch.proto

package co_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBranchRequest) Reset() {
	*x = GetBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_co_branch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchRequest) ProtoMessage() {}

func (x *GetBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_co_branch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchRequest.ProtoReflect.Descriptor instead.
func (*GetBranchRequest) Descriptor() ([]byte, []int) {
	return file_co_branch_proto_rawDescGZIP(), []int{0}
}

func (x *GetBranchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_co_branch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_co_branch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_co_branch_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteBranchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAllBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetAllBranchRequest) Reset() {
	*x = GetAllBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_co_branch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBranchRequest) ProtoMessage() {}

func (x *GetAllBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_co_branch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBranchRequest.ProtoReflect.Descriptor instead.
func (*GetAllBranchRequest) Descriptor() ([]byte, []int) {
	return file_co_branch_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllBranchRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllBranchRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAllBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []*CargoOwnerBranch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	Count    uint64              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllBranchResponse) Reset() {
	*x = GetAllBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_co_branch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBranchResponse) ProtoMessage() {}

func (x *GetAllBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_co_branch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBranchResponse.ProtoReflect.Descriptor instead.
func (*GetAllBranchResponse) Descriptor() ([]byte, []int) {
	return file_co_branch_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllBranchResponse) GetBranches() []*CargoOwnerBranch {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *GetAllBranchResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CheckExistsBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CheckExistsBranchRequest) Reset() {
	*x = CheckExistsBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_co_branch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistsBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistsBranchRequest) ProtoMessage() {}

func (x *CheckExistsBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_co_branch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistsBranchRequest.ProtoReflect.Descriptor instead.
func (*CheckExistsBranchRequest) Descriptor() ([]byte, []int) {
	return file_co_branch_proto_rawDescGZIP(), []int{4}
}

func (x *CheckExistsBranchRequest) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *CheckExistsBranchRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CheckExistsBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExists bool `protobuf:"varint,1,opt,name=is_exists,json=isExists,proto3" json:"is_exists,omitempty"`
}

func (x *CheckExistsBranchResponse) Reset() {
	*x = CheckExistsBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_co_branch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckExistsBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckExistsBranchResponse) ProtoMessage() {}

func (x *CheckExistsBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_co_branch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckExistsBranchResponse.ProtoReflect.Descriptor instead.
func (*CheckExistsBranchResponse) Descriptor() ([]byte, []int) {
	return file_co_branch_proto_rawDescGZIP(), []int{5}
}

func (x *CheckExistsBranchResponse) GetIsExists() bool {
	if x != nil {
		return x.IsExists
	}
	return false
}

var File_co_branch_proto protoreflect.FileDescriptor

var file_co_branch_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x08, 0x63, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x64,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38,
	0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x32, 0xd9, 0x02, 0x0a, 0x08, 0x43, 0x4f, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x1d, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_co_branch_proto_rawDescOnce sync.Once
	file_co_branch_proto_rawDescData = file_co_branch_proto_rawDesc
)

func file_co_branch_proto_rawDescGZIP() []byte {
	file_co_branch_proto_rawDescOnce.Do(func() {
		file_co_branch_proto_rawDescData = protoimpl.X.CompressGZIP(file_co_branch_proto_rawDescData)
	})
	return file_co_branch_proto_rawDescData
}

var file_co_branch_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_co_branch_proto_goTypes = []interface{}{
	(*GetBranchRequest)(nil),          // 0: genproto.GetBranchRequest
	(*DeleteBranchRequest)(nil),       // 1: genproto.DeleteBranchRequest
	(*GetAllBranchRequest)(nil),       // 2: genproto.GetAllBranchRequest
	(*GetAllBranchResponse)(nil),      // 3: genproto.GetAllBranchResponse
	(*CheckExistsBranchRequest)(nil),  // 4: genproto.CheckExistsBranchRequest
	(*CheckExistsBranchResponse)(nil), // 5: genproto.CheckExistsBranchResponse
	(*CargoOwnerBranch)(nil),          // 6: genproto.CargoOwnerBranch
	(*empty.Empty)(nil),               // 7: google.protobuf.Empty
}
var file_co_branch_proto_depIdxs = []int32{
	6, // 0: genproto.GetAllBranchResponse.branches:type_name -> genproto.CargoOwnerBranch
	6, // 1: genproto.COBranch.Create:input_type -> genproto.CargoOwnerBranch
	6, // 2: genproto.COBranch.Update:input_type -> genproto.CargoOwnerBranch
	0, // 3: genproto.COBranch.Get:input_type -> genproto.GetBranchRequest
	2, // 4: genproto.COBranch.GetAll:input_type -> genproto.GetAllBranchRequest
	1, // 5: genproto.COBranch.Delete:input_type -> genproto.DeleteBranchRequest
	7, // 6: genproto.COBranch.Create:output_type -> google.protobuf.Empty
	7, // 7: genproto.COBranch.Update:output_type -> google.protobuf.Empty
	6, // 8: genproto.COBranch.Get:output_type -> genproto.CargoOwnerBranch
	3, // 9: genproto.COBranch.GetAll:output_type -> genproto.GetAllBranchResponse
	7, // 10: genproto.COBranch.Delete:output_type -> google.protobuf.Empty
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_co_branch_proto_init() }
func file_co_branch_proto_init() {
	if File_co_branch_proto != nil {
		return
	}
	file_co_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_co_branch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_co_branch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_co_branch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_co_branch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_co_branch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistsBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_co_branch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckExistsBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_co_branch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_co_branch_proto_goTypes,
		DependencyIndexes: file_co_branch_proto_depIdxs,
		MessageInfos:      file_co_branch_proto_msgTypes,
	}.Build()
	File_co_branch_proto = out.File
	file_co_branch_proto_rawDesc = nil
	file_co_branch_proto_goTypes = nil
	file_co_branch_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// COBranchClient is the client API for COBranch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type COBranchClient interface {
	Create(ctx context.Context, in *CargoOwnerBranch, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *CargoOwnerBranch, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*CargoOwnerBranch, error)
	GetAll(ctx context.Context, in *GetAllBranchRequest, opts ...grpc.CallOption) (*GetAllBranchResponse, error)
	Delete(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cOBranchClient struct {
	cc grpc.ClientConnInterface
}

func NewCOBranchClient(cc grpc.ClientConnInterface) COBranchClient {
	return &cOBranchClient{cc}
}

func (c *cOBranchClient) Create(ctx context.Context, in *CargoOwnerBranch, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COBranch/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOBranchClient) Update(ctx context.Context, in *CargoOwnerBranch, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COBranch/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOBranchClient) Get(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*CargoOwnerBranch, error) {
	out := new(CargoOwnerBranch)
	err := c.cc.Invoke(ctx, "/genproto.COBranch/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOBranchClient) GetAll(ctx context.Context, in *GetAllBranchRequest, opts ...grpc.CallOption) (*GetAllBranchResponse, error) {
	out := new(GetAllBranchResponse)
	err := c.cc.Invoke(ctx, "/genproto.COBranch/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOBranchClient) Delete(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COBranch/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// COBranchServer is the server API for COBranch service.
type COBranchServer interface {
	Create(context.Context, *CargoOwnerBranch) (*empty.Empty, error)
	Update(context.Context, *CargoOwnerBranch) (*empty.Empty, error)
	Get(context.Context, *GetBranchRequest) (*CargoOwnerBranch, error)
	GetAll(context.Context, *GetAllBranchRequest) (*GetAllBranchResponse, error)
	Delete(context.Context, *DeleteBranchRequest) (*empty.Empty, error)
}

// UnimplementedCOBranchServer can be embedded to have forward compatible implementations.
type UnimplementedCOBranchServer struct {
}

func (*UnimplementedCOBranchServer) Create(context.Context, *CargoOwnerBranch) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCOBranchServer) Update(context.Context, *CargoOwnerBranch) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCOBranchServer) Get(context.Context, *GetBranchRequest) (*CargoOwnerBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCOBranchServer) GetAll(context.Context, *GetAllBranchRequest) (*GetAllBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCOBranchServer) Delete(context.Context, *DeleteBranchRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCOBranchServer(s *grpc.Server, srv COBranchServer) {
	s.RegisterService(&_COBranch_serviceDesc, srv)
}

func _COBranch_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoOwnerBranch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COBranchServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COBranch/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COBranchServer).Create(ctx, req.(*CargoOwnerBranch))
	}
	return interceptor(ctx, in, info, handler)
}

func _COBranch_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoOwnerBranch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COBranchServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COBranch/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COBranchServer).Update(ctx, req.(*CargoOwnerBranch))
	}
	return interceptor(ctx, in, info, handler)
}

func _COBranch_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COBranchServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COBranch/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COBranchServer).Get(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COBranch_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COBranchServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COBranch/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COBranchServer).GetAll(ctx, req.(*GetAllBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COBranch_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COBranchServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COBranch/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COBranchServer).Delete(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _COBranch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.COBranch",
	HandlerType: (*COBranchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _COBranch_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _COBranch_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _COBranch_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _COBranch_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _COBranch_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "co_branch.proto",
}
