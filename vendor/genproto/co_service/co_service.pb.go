// Code generated by protoc-gen-go. DO NOT EDIT.
// source: co_service.proto

package co_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{0}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{1}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetAllRequest struct {
	Page                 uint64   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint64   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllRequest) Reset()         { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()    {}
func (*GetAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{2}
}

func (m *GetAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllRequest.Unmarshal(m, b)
}
func (m *GetAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllRequest.Marshal(b, m, deterministic)
}
func (m *GetAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRequest.Merge(m, src)
}
func (m *GetAllRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllRequest.Size(m)
}
func (m *GetAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRequest proto.InternalMessageInfo

func (m *GetAllRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetAllResponse struct {
	Owners               []*CargoOwner `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty"`
	Count                uint64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAllResponse) Reset()         { *m = GetAllResponse{} }
func (m *GetAllResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllResponse) ProtoMessage()    {}
func (*GetAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{3}
}

func (m *GetAllResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllResponse.Unmarshal(m, b)
}
func (m *GetAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllResponse.Marshal(b, m, deterministic)
}
func (m *GetAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllResponse.Merge(m, src)
}
func (m *GetAllResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllResponse.Size(m)
}
func (m *GetAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllResponse proto.InternalMessageInfo

func (m *GetAllResponse) GetOwners() []*CargoOwner {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *GetAllResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AddDistributorRequest struct {
	CoId                 string   `protobuf:"bytes,1,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"`
	DistributorId        string   `protobuf:"bytes,2,opt,name=distributor_id,json=distributorId,proto3" json:"distributor_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDistributorRequest) Reset()         { *m = AddDistributorRequest{} }
func (m *AddDistributorRequest) String() string { return proto.CompactTextString(m) }
func (*AddDistributorRequest) ProtoMessage()    {}
func (*AddDistributorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{4}
}

func (m *AddDistributorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddDistributorRequest.Unmarshal(m, b)
}
func (m *AddDistributorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddDistributorRequest.Marshal(b, m, deterministic)
}
func (m *AddDistributorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDistributorRequest.Merge(m, src)
}
func (m *AddDistributorRequest) XXX_Size() int {
	return xxx_messageInfo_AddDistributorRequest.Size(m)
}
func (m *AddDistributorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDistributorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDistributorRequest proto.InternalMessageInfo

func (m *AddDistributorRequest) GetCoId() string {
	if m != nil {
		return m.CoId
	}
	return ""
}

func (m *AddDistributorRequest) GetDistributorId() string {
	if m != nil {
		return m.DistributorId
	}
	return ""
}

type DeleteDistributorRequest struct {
	CoId                 string   `protobuf:"bytes,1,opt,name=co_id,json=coId,proto3" json:"co_id,omitempty"`
	DistributorId        string   `protobuf:"bytes,2,opt,name=distributor_id,json=distributorId,proto3" json:"distributor_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDistributorRequest) Reset()         { *m = DeleteDistributorRequest{} }
func (m *DeleteDistributorRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteDistributorRequest) ProtoMessage()    {}
func (*DeleteDistributorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{5}
}

func (m *DeleteDistributorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDistributorRequest.Unmarshal(m, b)
}
func (m *DeleteDistributorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDistributorRequest.Marshal(b, m, deterministic)
}
func (m *DeleteDistributorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDistributorRequest.Merge(m, src)
}
func (m *DeleteDistributorRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteDistributorRequest.Size(m)
}
func (m *DeleteDistributorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDistributorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDistributorRequest proto.InternalMessageInfo

func (m *DeleteDistributorRequest) GetCoId() string {
	if m != nil {
		return m.CoId
	}
	return ""
}

func (m *DeleteDistributorRequest) GetDistributorId() string {
	if m != nil {
		return m.DistributorId
	}
	return ""
}

type CheckExistsRequest struct {
	Column               string   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckExistsRequest) Reset()         { *m = CheckExistsRequest{} }
func (m *CheckExistsRequest) String() string { return proto.CompactTextString(m) }
func (*CheckExistsRequest) ProtoMessage()    {}
func (*CheckExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{6}
}

func (m *CheckExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckExistsRequest.Unmarshal(m, b)
}
func (m *CheckExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckExistsRequest.Marshal(b, m, deterministic)
}
func (m *CheckExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckExistsRequest.Merge(m, src)
}
func (m *CheckExistsRequest) XXX_Size() int {
	return xxx_messageInfo_CheckExistsRequest.Size(m)
}
func (m *CheckExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckExistsRequest proto.InternalMessageInfo

func (m *CheckExistsRequest) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *CheckExistsRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CheckExistsResponse struct {
	IsExists             bool     `protobuf:"varint,1,opt,name=is_exists,json=isExists,proto3" json:"is_exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckExistsResponse) Reset()         { *m = CheckExistsResponse{} }
func (m *CheckExistsResponse) String() string { return proto.CompactTextString(m) }
func (*CheckExistsResponse) ProtoMessage()    {}
func (*CheckExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_825073e23d8cf421, []int{7}
}

func (m *CheckExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckExistsResponse.Unmarshal(m, b)
}
func (m *CheckExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckExistsResponse.Marshal(b, m, deterministic)
}
func (m *CheckExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckExistsResponse.Merge(m, src)
}
func (m *CheckExistsResponse) XXX_Size() int {
	return xxx_messageInfo_CheckExistsResponse.Size(m)
}
func (m *CheckExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckExistsResponse proto.InternalMessageInfo

func (m *CheckExistsResponse) GetIsExists() bool {
	if m != nil {
		return m.IsExists
	}
	return false
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "genproto.GetRequest")
	proto.RegisterType((*DeleteRequest)(nil), "genproto.DeleteRequest")
	proto.RegisterType((*GetAllRequest)(nil), "genproto.GetAllRequest")
	proto.RegisterType((*GetAllResponse)(nil), "genproto.GetAllResponse")
	proto.RegisterType((*AddDistributorRequest)(nil), "genproto.AddDistributorRequest")
	proto.RegisterType((*DeleteDistributorRequest)(nil), "genproto.DeleteDistributorRequest")
	proto.RegisterType((*CheckExistsRequest)(nil), "genproto.CheckExistsRequest")
	proto.RegisterType((*CheckExistsResponse)(nil), "genproto.CheckExistsResponse")
}

func init() { proto.RegisterFile("co_service.proto", fileDescriptor_825073e23d8cf421) }

var fileDescriptor_825073e23d8cf421 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x6b, 0xdb, 0x40,
	0x10, 0x85, 0x6d, 0xc7, 0x11, 0xf6, 0x18, 0x9b, 0x76, 0x9d, 0xa4, 0x42, 0x49, 0x49, 0x58, 0x28,
	0xe4, 0x50, 0x64, 0x70, 0x2e, 0x2d, 0x25, 0x87, 0xc4, 0x31, 0x26, 0x34, 0x90, 0x56, 0x49, 0x7b,
	0xe8, 0xc5, 0xc8, 0xd2, 0x54, 0x5d, 0x22, 0x6b, 0x55, 0xed, 0x2a, 0x69, 0xff, 0x4f, 0x7f, 0x68,
	0xd1, 0xae, 0x64, 0xc9, 0xb5, 0x13, 0x70, 0xc9, 0x6d, 0x67, 0xe7, 0xbd, 0xc7, 0x68, 0xf6, 0x43,
	0xf0, 0xc2, 0xe3, 0x53, 0x81, 0xc9, 0x3d, 0xf3, 0xd0, 0x8e, 0x13, 0x2e, 0x39, 0x69, 0x05, 0x18,
	0xa9, 0x93, 0xb5, 0x1f, 0x70, 0x1e, 0x84, 0x38, 0x50, 0xd5, 0x2c, 0xfd, 0x3e, 0xc0, 0x79, 0x2c,
	0x7f, 0x6b, 0x99, 0xd5, 0xf2, 0xb8, 0x3e, 0xd1, 0x03, 0x80, 0x09, 0x4a, 0x07, 0x7f, 0xa6, 0x28,
	0x24, 0xe9, 0x41, 0x83, 0xf9, 0x66, 0xfd, 0xa8, 0x7e, 0xdc, 0x76, 0x1a, 0xcc, 0xa7, 0x87, 0xd0,
	0xbd, 0xc0, 0x10, 0x25, 0x3e, 0x26, 0x78, 0x0f, 0xdd, 0x09, 0xca, 0xb3, 0x30, 0x2c, 0x04, 0x04,
	0x9a, 0xb1, 0x1b, 0xa0, 0x92, 0x34, 0x1d, 0x75, 0x26, 0x3b, 0xb0, 0x1d, 0xb2, 0x39, 0x93, 0x66,
	0x43, 0x5d, 0xea, 0x82, 0xde, 0x42, 0xaf, 0xb0, 0x8a, 0x98, 0x47, 0x02, 0xc9, 0x5b, 0x30, 0xf8,
	0x43, 0x84, 0x89, 0x30, 0xeb, 0x47, 0x5b, 0xc7, 0x9d, 0xe1, 0x8e, 0x5d, 0x7c, 0x8d, 0x3d, 0x72,
	0x93, 0x80, 0x5f, 0x67, 0x4d, 0x27, 0xd7, 0x64, 0xa9, 0x1e, 0x4f, 0xa3, 0x45, 0xaa, 0x2a, 0xe8,
	0x0d, 0xec, 0x9e, 0xf9, 0xfe, 0x05, 0x13, 0x32, 0x61, 0xb3, 0x54, 0xf2, 0xa4, 0x18, 0xac, 0x9f,
	0xc9, 0xa7, 0x8b, 0xe1, 0x9b, 0x1e, 0xbf, 0xf4, 0xc9, 0x1b, 0xe8, 0xf9, 0xa5, 0x34, 0xeb, 0x36,
	0x54, 0xb7, 0x5b, 0xb9, 0xbd, 0xf4, 0xe9, 0x57, 0x30, 0xf5, 0x1a, 0x9e, 0x39, 0xf7, 0x1c, 0xc8,
	0xe8, 0x07, 0x7a, 0x77, 0xe3, 0x5f, 0x4c, 0x48, 0x51, 0x24, 0xee, 0x81, 0xe1, 0xf1, 0x30, 0x9d,
	0x47, 0x79, 0x64, 0x5e, 0x65, 0x1f, 0x7c, 0xef, 0x86, 0x29, 0xe6, 0x59, 0xba, 0xa0, 0x43, 0xe8,
	0x2f, 0x65, 0xe4, 0xbb, 0xdc, 0x87, 0x36, 0x13, 0x53, 0x54, 0x97, 0x2a, 0xa7, 0xe5, 0xb4, 0x98,
	0xd0, 0xa2, 0xe1, 0x9f, 0x6d, 0x68, 0x8f, 0xae, 0x6f, 0x34, 0x39, 0xe4, 0x1d, 0x18, 0xa3, 0x04,
	0x5d, 0x89, 0x64, 0xed, 0xc2, 0xad, 0x3d, 0x5b, 0xa3, 0x64, 0x17, 0x28, 0xd9, 0xe3, 0x0c, 0x25,
	0x5a, 0xcb, 0x9c, 0x5f, 0x62, 0xff, 0x7f, 0x9c, 0x27, 0xb0, 0x35, 0x41, 0x59, 0xb5, 0x95, 0x14,
	0x5a, 0x6b, 0xc3, 0x68, 0x8d, 0x9c, 0x82, 0xa1, 0x89, 0x21, 0xaf, 0x96, 0x7c, 0x25, 0x7e, 0x96,
	0xb9, 0xda, 0xd0, 0x0b, 0xa1, 0x35, 0xf2, 0x01, 0x0c, 0xfd, 0x8a, 0x55, 0xfb, 0x12, 0xde, 0x4f,
	0x0c, 0xfc, 0x11, 0x7a, 0xcb, 0x5c, 0x91, 0xc3, 0x32, 0x64, 0x2d, 0x71, 0x4f, 0x84, 0x7d, 0x86,
	0x97, 0x2b, 0x3c, 0x11, 0xfa, 0xef, 0x50, 0x1b, 0x45, 0x5e, 0x41, 0xa7, 0x82, 0x01, 0x39, 0xa8,
	0xac, 0x70, 0x85, 0x30, 0xeb, 0xf5, 0x23, 0xdd, 0xc5, 0xaa, 0x4e, 0xa1, 0xa3, 0x1f, 0xf6, 0x96,
	0xdf, 0x61, 0xb4, 0xf1, 0xeb, 0x8e, 0x33, 0x26, 0xdd, 0x28, 0xc0, 0x2b, 0x1e, 0xb0, 0xe8, 0x93,
	0x2b, 0xc4, 0x03, 0x4f, 0xfc, 0x4d, 0x63, 0xce, 0x77, 0xbf, 0xf5, 0x0b, 0xc3, 0xa0, 0xfc, 0xd3,
	0xcd, 0x0c, 0x75, 0x73, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x43, 0x0e, 0x32, 0x5c, 0xfe, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// COServiceClient is the client API for COService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type COServiceClient interface {
	Create(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CargoOwner, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddDistributor(ctx context.Context, in *AddDistributorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteDistributor(ctx context.Context, in *DeleteDistributorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckExists(ctx context.Context, in *CheckExistsRequest, opts ...grpc.CallOption) (*CheckExistsResponse, error)
	UpdateToken(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangeLoginPassword(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCOServiceClient(cc grpc.ClientConnInterface) COServiceClient {
	return &cOServiceClient{cc}
}

func (c *cOServiceClient) Create(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) Update(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CargoOwner, error) {
	out := new(CargoOwner)
	err := c.cc.Invoke(ctx, "/genproto.COService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/genproto.COService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) AddDistributor(ctx context.Context, in *AddDistributorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COService/AddDistributor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) DeleteDistributor(ctx context.Context, in *DeleteDistributorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COService/DeleteDistributor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) CheckExists(ctx context.Context, in *CheckExistsRequest, opts ...grpc.CallOption) (*CheckExistsResponse, error) {
	out := new(CheckExistsResponse)
	err := c.cc.Invoke(ctx, "/genproto.COService/CheckExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) UpdateToken(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COService/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOServiceClient) ChangeLoginPassword(ctx context.Context, in *CargoOwner, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.COService/ChangeLoginPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// COServiceServer is the server API for COService service.
type COServiceServer interface {
	Create(context.Context, *CargoOwner) (*empty.Empty, error)
	Update(context.Context, *CargoOwner) (*empty.Empty, error)
	Get(context.Context, *GetRequest) (*CargoOwner, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	AddDistributor(context.Context, *AddDistributorRequest) (*empty.Empty, error)
	DeleteDistributor(context.Context, *DeleteDistributorRequest) (*empty.Empty, error)
	CheckExists(context.Context, *CheckExistsRequest) (*CheckExistsResponse, error)
	UpdateToken(context.Context, *CargoOwner) (*empty.Empty, error)
	ChangeLoginPassword(context.Context, *CargoOwner) (*empty.Empty, error)
}

// UnimplementedCOServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCOServiceServer struct {
}

func (*UnimplementedCOServiceServer) Create(ctx context.Context, req *CargoOwner) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCOServiceServer) Update(ctx context.Context, req *CargoOwner) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCOServiceServer) Get(ctx context.Context, req *GetRequest) (*CargoOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCOServiceServer) GetAll(ctx context.Context, req *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCOServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCOServiceServer) AddDistributor(ctx context.Context, req *AddDistributorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDistributor not implemented")
}
func (*UnimplementedCOServiceServer) DeleteDistributor(ctx context.Context, req *DeleteDistributorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDistributor not implemented")
}
func (*UnimplementedCOServiceServer) CheckExists(ctx context.Context, req *CheckExistsRequest) (*CheckExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExists not implemented")
}
func (*UnimplementedCOServiceServer) UpdateToken(ctx context.Context, req *CargoOwner) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedCOServiceServer) ChangeLoginPassword(ctx context.Context, req *CargoOwner) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLoginPassword not implemented")
}

func RegisterCOServiceServer(s *grpc.Server, srv COServiceServer) {
	s.RegisterService(&_COService_serviceDesc, srv)
}

func _COService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).Create(ctx, req.(*CargoOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).Update(ctx, req.(*CargoOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_AddDistributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDistributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).AddDistributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/AddDistributor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).AddDistributor(ctx, req.(*AddDistributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_DeleteDistributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDistributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).DeleteDistributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/DeleteDistributor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).DeleteDistributor(ctx, req.(*DeleteDistributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_CheckExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).CheckExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/CheckExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).CheckExists(ctx, req.(*CheckExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).UpdateToken(ctx, req.(*CargoOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _COService_ChangeLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CargoOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(COServiceServer).ChangeLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.COService/ChangeLoginPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(COServiceServer).ChangeLoginPassword(ctx, req.(*CargoOwner))
	}
	return interceptor(ctx, in, info, handler)
}

var _COService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.COService",
	HandlerType: (*COServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _COService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _COService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _COService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _COService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _COService_Delete_Handler,
		},
		{
			MethodName: "AddDistributor",
			Handler:    _COService_AddDistributor_Handler,
		},
		{
			MethodName: "DeleteDistributor",
			Handler:    _COService_DeleteDistributor_Handler,
		},
		{
			MethodName: "CheckExists",
			Handler:    _COService_CheckExists_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _COService_UpdateToken_Handler,
		},
		{
			MethodName: "ChangeLoginPassword",
			Handler:    _COService_ChangeLoginPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "co_service.proto",
}
